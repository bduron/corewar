#include <ncurses.h>
#include <libc.h>

WINDOW *create_newwin(int height, int width, int starty, int startx, char *name);
void destroy_win(WINDOW *local_win);

int main(int argc, char *argv[])
{
	WINDOW *win_arena;
	WINDOW *win_play0;
	WINDOW *win_play1;
	WINDOW *win_play2;
	WINDOW *win_play3;
	WINDOW *win_infos;

	int ch;

	initscr();			/* Start curses mode 		*/
	cbreak();			/* Line buffering disabled, Pass on
					 * everty thing to me 		*/
	keypad(stdscr, TRUE);		/* I need that nifty F1 	*/
	noecho();

	refresh();

	win_arena = create_newwin(LINES - 10, 2 * (LINES - 10), 0, 0, "Arena");
	win_play0 = create_newwin(10, 2 * (LINES - 10) / 4, LINES - 10, 0 * 2 * (LINES - 10) / 4, "Champion 1");
	win_play1 = create_newwin(10, 2 * (LINES - 10) / 4, LINES - 10, 1 * 2 * (LINES - 10) / 4, "Champion 2");
	win_play2 = create_newwin(10, 2 * (LINES - 10) / 4, LINES - 10, 2 * 2 * (LINES - 10) / 4, "Champion 3");
	win_play3 = create_newwin(10, 2 * (LINES - 10) / 4, LINES - 10, 3 * 2 * (LINES - 10) / 4, "Champion 4");
	win_infos = create_newwin(LINES, COLS - 2 * (LINES - 10), 0, 2 * (LINES - 10), "Informations");

	char events[4][100];
	char *names[4] = {"A", "B", "C", "D"};
	int i;

	i = 0;

	while((ch = getch()) != KEY_F(1))
	{
		switch(ch)
		{
			case 'f':
				sprintf(events[i], "OMG %s fork you!", names[i]);
				break;
			case 'j':
				sprintf(events[i], "%s realized a incredible jump !!", names[i]);
				break;
			case 's':
				sprintf(events[i], "%s is storing data. This play is amazing", names[i]);
				break;
			// case KEY_LEFT:
			// 	destroy_win(my_win);
			// 	my_win = create_newwin(height, width, starty,--startx);
			// 	break;
			// case KEY_RIGHT:
			// 	destroy_win(my_win);
			// 	my_win = create_newwin(height, width, starty,++startx);
			// 	break;
			// case KEY_UP:
			// 	destroy_win(my_win);
			// 	my_win = create_newwin(height, width, --starty,startx);
			// 	break;
			// case KEY_DOWN:
			// 	destroy_win(my_win);
			// 	my_win = create_newwin(height, width, ++starty,startx);
			// 	break;
		}
		if (i == 3)
		{
			werase(win_play0);
			werase(win_play1);
			werase(win_play2);
			werase(win_play3);
			mvwprintw(win_play0, 0, 0, events[0]);
			mvwprintw(win_play1, 0, 0, events[1]);
			mvwprintw(win_play2, 0, 0, events[2]);
			mvwprintw(win_play3, 0, 0, events[3]);
			wrefresh(win_play0);
			wrefresh(win_play1);
			wrefresh(win_play2);
			wrefresh(win_play3);
			i = -1;
		}
		++i;
	}

	endwin();			/* End curses mode		  */
	return 0;
}

WINDOW *create_newwin(int height, int width, int starty, int startx, char *name)
{
	WINDOW *win_box;
	WINDOW *win_content;
	size_t	len;

	win_box = newwin(height, width, starty, startx);
	box(win_box, 0 , 0);
	win_content = derwin(win_box, height - 2, width - 4, 1, 2);
	len = strlen(name);
	wmove(win_box, 0, (width - len) / 2 - 3);
	wprintw(win_box, " - %s - ", name);
	wrefresh(win_box);
	wrefresh(win_content);
	return (win_content);
}

void destroy_win(WINDOW *local_win)
{
	wborder(local_win, ' ', ' ', ' ',' ',' ',' ',' ',' ');
	wrefresh(local_win);
	delwin(local_win);
}
